<?php
/**
 * Body1
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Marketplace Grupo Netshoes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Body1 Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Body1 implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'body_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sku' => 'string',
        'product_group' => 'string',
        'department' => 'string',
        'product_type' => 'string',
        'brand' => 'string',
        'name' => 'string',
        'description' => 'string',
        'color' => 'string',
        'flavor' => 'string',
        'gender' => 'string',
        'manufacturer_code' => 'string',
        'size' => 'string',
        'ean_isbn' => 'string',
        'height' => 'double',
        'width' => 'double',
        'depth' => 'double',
        'weight' => 'double',
        'video' => 'string',
        'images' => '\Swagger\Client\Model\ProductsImages[]',
        'attributes' => '\Swagger\Client\Model\ProductsAttributes[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'sku' => 'sku',
        'product_group' => 'productGroup',
        'department' => 'department',
        'product_type' => 'productType',
        'brand' => 'brand',
        'name' => 'name',
        'description' => 'description',
        'color' => 'color',
        'flavor' => 'flavor',
        'gender' => 'gender',
        'manufacturer_code' => 'manufacturerCode',
        'size' => 'size',
        'ean_isbn' => 'eanIsbn',
        'height' => 'height',
        'width' => 'width',
        'depth' => 'depth',
        'weight' => 'weight',
        'video' => 'video',
        'images' => 'images',
        'attributes' => 'attributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'sku' => 'setSku',
        'product_group' => 'setProductGroup',
        'department' => 'setDepartment',
        'product_type' => 'setProductType',
        'brand' => 'setBrand',
        'name' => 'setName',
        'description' => 'setDescription',
        'color' => 'setColor',
        'flavor' => 'setFlavor',
        'gender' => 'setGender',
        'manufacturer_code' => 'setManufacturerCode',
        'size' => 'setSize',
        'ean_isbn' => 'setEanIsbn',
        'height' => 'setHeight',
        'width' => 'setWidth',
        'depth' => 'setDepth',
        'weight' => 'setWeight',
        'video' => 'setVideo',
        'images' => 'setImages',
        'attributes' => 'setAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'sku' => 'getSku',
        'product_group' => 'getProductGroup',
        'department' => 'getDepartment',
        'product_type' => 'getProductType',
        'brand' => 'getBrand',
        'name' => 'getName',
        'description' => 'getDescription',
        'color' => 'getColor',
        'flavor' => 'getFlavor',
        'gender' => 'getGender',
        'manufacturer_code' => 'getManufacturerCode',
        'size' => 'getSize',
        'ean_isbn' => 'getEanIsbn',
        'height' => 'getHeight',
        'width' => 'getWidth',
        'depth' => 'getDepth',
        'weight' => 'getWeight',
        'video' => 'getVideo',
        'images' => 'getImages',
        'attributes' => 'getAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['product_group'] = isset($data['product_group']) ? $data['product_group'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['flavor'] = isset($data['flavor']) ? $data['flavor'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['manufacturer_code'] = isset($data['manufacturer_code']) ? $data['manufacturer_code'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['ean_isbn'] = isset($data['ean_isbn']) ? $data['ean_isbn'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['depth'] = isset($data['depth']) ? $data['depth'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['video'] = isset($data['video']) ? $data['video'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['sku'] === null) {
            $invalid_properties[] = "'sku' can't be null";
        }
        if ((strlen($this->container['sku']) > 50)) {
            $invalid_properties[] = "invalid value for 'sku', the character length must be smaller than or equal to 50.";
        }

        if ((strlen($this->container['sku']) < 1)) {
            $invalid_properties[] = "invalid value for 'sku', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['product_group'] === null) {
            $invalid_properties[] = "'product_group' can't be null";
        }
        if ((strlen($this->container['product_group']) > 50)) {
            $invalid_properties[] = "invalid value for 'product_group', the character length must be smaller than or equal to 50.";
        }

        if ((strlen($this->container['product_group']) < 1)) {
            $invalid_properties[] = "invalid value for 'product_group', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['department'] === null) {
            $invalid_properties[] = "'department' can't be null";
        }
        if ((strlen($this->container['department']) > 50)) {
            $invalid_properties[] = "invalid value for 'department', the character length must be smaller than or equal to 50.";
        }

        if ((strlen($this->container['department']) < 1)) {
            $invalid_properties[] = "invalid value for 'department', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['product_type'] === null) {
            $invalid_properties[] = "'product_type' can't be null";
        }
        if ((strlen($this->container['product_type']) > 50)) {
            $invalid_properties[] = "invalid value for 'product_type', the character length must be smaller than or equal to 50.";
        }

        if ((strlen($this->container['product_type']) < 1)) {
            $invalid_properties[] = "invalid value for 'product_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['brand'] === null) {
            $invalid_properties[] = "'brand' can't be null";
        }
        if ((strlen($this->container['brand']) > 50)) {
            $invalid_properties[] = "invalid value for 'brand', the character length must be smaller than or equal to 50.";
        }

        if ((strlen($this->container['brand']) < 1)) {
            $invalid_properties[] = "invalid value for 'brand', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 50)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if ((strlen($this->container['name']) < 1)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ((strlen($this->container['description']) > 50)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 50.";
        }

        if ((strlen($this->container['description']) < 1)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['color'] === null) {
            $invalid_properties[] = "'color' can't be null";
        }
        if ($this->container['flavor'] === null) {
            $invalid_properties[] = "'flavor' can't be null";
        }
        if ($this->container['gender'] === null) {
            $invalid_properties[] = "'gender' can't be null";
        }
        if ((strlen($this->container['gender']) > 50)) {
            $invalid_properties[] = "invalid value for 'gender', the character length must be smaller than or equal to 50.";
        }

        if ((strlen($this->container['gender']) < 1)) {
            $invalid_properties[] = "invalid value for 'gender', the character length must be bigger than or equal to 1.";
        }

        if (!preg_match("/Homem|Mulher|Unissex/", $this->container['gender'])) {
            $invalid_properties[] = "invalid value for 'gender', must be conform to the pattern /Homem|Mulher|Unissex/.";
        }

        if ($this->container['size'] === null) {
            $invalid_properties[] = "'size' can't be null";
        }
        if ((strlen($this->container['size']) > 50)) {
            $invalid_properties[] = "invalid value for 'size', the character length must be smaller than or equal to 50.";
        }

        if ((strlen($this->container['size']) < 1)) {
            $invalid_properties[] = "invalid value for 'size', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['height'] === null) {
            $invalid_properties[] = "'height' can't be null";
        }
        if ($this->container['width'] === null) {
            $invalid_properties[] = "'width' can't be null";
        }
        if ($this->container['depth'] === null) {
            $invalid_properties[] = "'depth' can't be null";
        }
        if ($this->container['weight'] === null) {
            $invalid_properties[] = "'weight' can't be null";
        }
        if ($this->container['images'] === null) {
            $invalid_properties[] = "'images' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['sku'] === null) {
            return false;
        }
        if (strlen($this->container['sku']) > 50) {
            return false;
        }
        if (strlen($this->container['sku']) < 1) {
            return false;
        }
        if ($this->container['product_group'] === null) {
            return false;
        }
        if (strlen($this->container['product_group']) > 50) {
            return false;
        }
        if (strlen($this->container['product_group']) < 1) {
            return false;
        }
        if ($this->container['department'] === null) {
            return false;
        }
        if (strlen($this->container['department']) > 50) {
            return false;
        }
        if (strlen($this->container['department']) < 1) {
            return false;
        }
        if ($this->container['product_type'] === null) {
            return false;
        }
        if (strlen($this->container['product_type']) > 50) {
            return false;
        }
        if (strlen($this->container['product_type']) < 1) {
            return false;
        }
        if ($this->container['brand'] === null) {
            return false;
        }
        if (strlen($this->container['brand']) > 50) {
            return false;
        }
        if (strlen($this->container['brand']) < 1) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 50) {
            return false;
        }
        if (strlen($this->container['name']) < 1) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if (strlen($this->container['description']) > 50) {
            return false;
        }
        if (strlen($this->container['description']) < 1) {
            return false;
        }
        if ($this->container['color'] === null) {
            return false;
        }
        if ($this->container['flavor'] === null) {
            return false;
        }
        if ($this->container['gender'] === null) {
            return false;
        }
        if (strlen($this->container['gender']) > 50) {
            return false;
        }
        if (strlen($this->container['gender']) < 1) {
            return false;
        }
        if (!preg_match("/Homem|Mulher|Unissex/", $this->container['gender'])) {
            return false;
        }
        if ($this->container['size'] === null) {
            return false;
        }
        if (strlen($this->container['size']) > 50) {
            return false;
        }
        if (strlen($this->container['size']) < 1) {
            return false;
        }
        if ($this->container['height'] === null) {
            return false;
        }
        if ($this->container['width'] === null) {
            return false;
        }
        if ($this->container['depth'] === null) {
            return false;
        }
        if ($this->container['weight'] === null) {
            return false;
        }
        if ($this->container['images'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets sku
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     * @param string $sku
     * @return $this
     */
    public function setSku($sku)
    {
        if ((strlen($sku) > 50)) {
            throw new \InvalidArgumentException('invalid length for $sku when calling Body1., must be smaller than or equal to 50.');
        }
        if ((strlen($sku) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sku when calling Body1., must be bigger than or equal to 1.');
        }

        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets product_group
     * @return string
     */
    public function getProductGroup()
    {
        return $this->container['product_group'];
    }

    /**
     * Sets product_group
     * @param string $product_group
     * @return $this
     */
    public function setProductGroup($product_group)
    {
        if ((strlen($product_group) > 50)) {
            throw new \InvalidArgumentException('invalid length for $product_group when calling Body1., must be smaller than or equal to 50.');
        }
        if ((strlen($product_group) < 1)) {
            throw new \InvalidArgumentException('invalid length for $product_group when calling Body1., must be bigger than or equal to 1.');
        }

        $this->container['product_group'] = $product_group;

        return $this;
    }

    /**
     * Gets department
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     * @param string $department
     * @return $this
     */
    public function setDepartment($department)
    {
        if ((strlen($department) > 50)) {
            throw new \InvalidArgumentException('invalid length for $department when calling Body1., must be smaller than or equal to 50.');
        }
        if ((strlen($department) < 1)) {
            throw new \InvalidArgumentException('invalid length for $department when calling Body1., must be bigger than or equal to 1.');
        }

        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets product_type
     * @return string
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     * @param string $product_type
     * @return $this
     */
    public function setProductType($product_type)
    {
        if ((strlen($product_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $product_type when calling Body1., must be smaller than or equal to 50.');
        }
        if ((strlen($product_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $product_type when calling Body1., must be bigger than or equal to 1.');
        }

        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets brand
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     * @param string $brand
     * @return $this
     */
    public function setBrand($brand)
    {
        if ((strlen($brand) > 50)) {
            throw new \InvalidArgumentException('invalid length for $brand when calling Body1., must be smaller than or equal to 50.');
        }
        if ((strlen($brand) < 1)) {
            throw new \InvalidArgumentException('invalid length for $brand when calling Body1., must be bigger than or equal to 1.');
        }

        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Body1., must be smaller than or equal to 50.');
        }
        if ((strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Body1., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        if ((strlen($description) > 50)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Body1., must be smaller than or equal to 50.');
        }
        if ((strlen($description) < 1)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Body1., must be bigger than or equal to 1.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets color
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     * @param string $color
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets flavor
     * @return string
     */
    public function getFlavor()
    {
        return $this->container['flavor'];
    }

    /**
     * Sets flavor
     * @param string $flavor
     * @return $this
     */
    public function setFlavor($flavor)
    {
        $this->container['flavor'] = $flavor;

        return $this;
    }

    /**
     * Gets gender
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     * @param string $gender
     * @return $this
     */
    public function setGender($gender)
    {
        if ((strlen($gender) > 50)) {
            throw new \InvalidArgumentException('invalid length for $gender when calling Body1., must be smaller than or equal to 50.');
        }
        if ((strlen($gender) < 1)) {
            throw new \InvalidArgumentException('invalid length for $gender when calling Body1., must be bigger than or equal to 1.');
        }
        if ((!preg_match("/Homem|Mulher|Unissex/", $gender))) {
            throw new \InvalidArgumentException("invalid value for $gender when calling Body1., must conform to the pattern /Homem|Mulher|Unissex/.");
        }

        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets manufacturer_code
     * @return string
     */
    public function getManufacturerCode()
    {
        return $this->container['manufacturer_code'];
    }

    /**
     * Sets manufacturer_code
     * @param string $manufacturer_code
     * @return $this
     */
    public function setManufacturerCode($manufacturer_code)
    {
        $this->container['manufacturer_code'] = $manufacturer_code;

        return $this;
    }

    /**
     * Gets size
     * @return string
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     * @param string $size
     * @return $this
     */
    public function setSize($size)
    {
        if ((strlen($size) > 50)) {
            throw new \InvalidArgumentException('invalid length for $size when calling Body1., must be smaller than or equal to 50.');
        }
        if ((strlen($size) < 1)) {
            throw new \InvalidArgumentException('invalid length for $size when calling Body1., must be bigger than or equal to 1.');
        }

        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets ean_isbn
     * @return string
     */
    public function getEanIsbn()
    {
        return $this->container['ean_isbn'];
    }

    /**
     * Sets ean_isbn
     * @param string $ean_isbn
     * @return $this
     */
    public function setEanIsbn($ean_isbn)
    {
        $this->container['ean_isbn'] = $ean_isbn;

        return $this;
    }

    /**
     * Gets height
     * @return double
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param double $height
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets width
     * @return double
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     * @param double $width
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets depth
     * @return double
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     * @param double $depth
     * @return $this
     */
    public function setDepth($depth)
    {
        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets weight
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     * @param double $weight
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets video
     * @return string
     */
    public function getVideo()
    {
        return $this->container['video'];
    }

    /**
     * Sets video
     * @param string $video
     * @return $this
     */
    public function setVideo($video)
    {
        $this->container['video'] = $video;

        return $this;
    }

    /**
     * Gets images
     * @return \Swagger\Client\Model\ProductsImages[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     * @param \Swagger\Client\Model\ProductsImages[] $images
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets attributes
     * @return \Swagger\Client\Model\ProductsAttributes[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     * @param \Swagger\Client\Model\ProductsAttributes[] $attributes
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


